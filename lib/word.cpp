#include "word.h"
#include <iostream>

using namespace std;

Word::Word(char _c):
c(_c)
{
    start_fill_x = 11;
    start_fill_y = 8;
}

Matriks Word::draw() {
    if (c == 'p' || c == 'P')
        return drawP();
    else if (c == 'y' || c == 'Y')
        return drawY();
    else if (c == 'z' || c == 'Z')
        return drawZ();
    else if (c == 'g' || c == 'G')
        return drawG();
    else if(c == 'n' || c == 'N')
        return drawN();
    else if(c == 'a' || c == 'A')
        return drawA();
    else if(c == 'u' || c == 'U')
        return drawU();
    else if(c == 'h' || c == 'H')
        return drawh();
    else if (c == 'X')
        return drawParachute();
}

Matriks Word::drawParachute() {
    Matriks map(365,390);
    int lines[636][4] = {
        {179, 3, 199, 3}, {164, 4, 213, 4}, {155, 5, 221, 5}, {148, 6, 229, 6}, {142, 7, 234, 7}, {137, 8, 240, 8}, {132, 9, 245, 9}, {128, 10, 249, 10}, {124, 11, 253, 11}, {120, 12, 257, 12}, {116, 13, 261, 13}, {113, 14, 264, 14}, {110, 15, 267, 15}, {107, 16, 271, 16}, {104, 17, 274, 17}, {101, 18, 277, 18}, {98, 19, 279, 19}, {96, 20, 282, 20}, {93, 21, 285, 21}, {91, 22, 288, 22}, {88, 23, 290, 23}, {85, 24, 292, 24}, {83, 25, 295, 25}, {81, 26, 297, 26}, {79, 27, 299, 27}, {76, 28, 302, 28}, {74, 29, 304, 29}, {72, 30, 306, 30}, {70, 31, 308, 31}, {68, 32, 310, 32}, {66, 33, 312, 33}, {64, 34, 314, 34}, {62, 35, 316, 35}, {60, 36, 318, 36}, {59, 37, 320, 37}, {57, 38, 321, 38}, {55, 39, 323, 39}, {53, 40, 325, 40}, {52, 41, 327, 41}, {50, 42, 328, 42}, {48, 43, 330, 43}, {46, 44, 332, 44}, {45, 45, 333, 45}, {43, 46, 335, 46}, {42, 47, 336, 47}, {40, 48, 338, 48}, {38, 49, 339, 49}, {37, 50, 341, 50}, {35, 51, 342, 51}, {34, 52, 344, 52}, {32, 53, 345, 53}, {31, 54, 346, 54}, {29, 55, 348, 55}, {28, 56, 349, 56}, {27, 57, 350, 57}, {25, 58, 351, 58}, {24, 59, 353, 59}, {22, 60, 354, 60}, {21, 61, 355, 61}, {20, 62, 356, 62}, {18, 63, 357, 63}, {17, 64, 358, 64}, {16, 65, 358, 65}, {14, 66, 359, 66}, {9, 67, 11, 67}, {13, 67, 360, 67}, {8, 68, 360, 68}, {8, 69, 360, 69}, {8, 70, 360, 70}, {9, 71, 359, 71}, {10, 72, 357, 72}, {10, 73, 356, 73}, {11, 74, 355, 74}, {12, 75, 355, 75}, {12, 76, 354, 76}, {13, 77, 353, 77}, {14, 78, 352, 78}, {15, 79, 352, 79}, {15, 80, 351, 80}, {16, 81, 350, 81}, {17, 82, 349, 82}, {17, 83, 349, 83}, {18, 84, 348, 84}, {19, 85, 347, 85}, {19, 86, 347, 86}, {20, 87, 346, 87}, {21, 88, 345, 88}, {22, 89, 344, 89}, {22, 90, 344, 90}, {23, 91, 343, 91}, {24, 92, 342, 92}, {24, 93, 341, 93}, {25, 94, 341, 94}, {26, 95, 340, 95}, {27, 96, 339, 96}, {27, 97, 339, 97}, {28, 98, 338, 98}, {29, 99, 337, 99}, {29, 100, 336, 100}, {30, 101, 336, 101}, {31, 102, 335, 102}, {31, 103, 334, 103}, {32, 104, 333, 104}, {33, 105, 333, 105}, {34, 106, 332, 106}, {34, 107, 331, 107}, {35, 108, 331, 108}, {36, 109, 330, 109}, {36, 110, 329, 110}, {37, 111, 328, 111}, {38, 112, 328, 112}, {39, 113, 327, 113}, {39, 114, 326, 114}, {40, 115, 325, 115}, {41, 116, 325, 116}, {41, 117, 324, 117}, {42, 118, 323, 118}, {43, 119, 323, 119}, {44, 120, 322, 120}, {44, 121, 321, 121}, {45, 122, 320, 122}, {46, 123, 320, 123}, {46, 124, 319, 124}, {47, 125, 318, 125}, {48, 126, 317, 126}, {48, 127, 317, 127}, {49, 128, 316, 128}, {50, 129, 315, 129}, {51, 130, 315, 130}, {51, 131, 314, 131}, {52, 132, 313, 132}, {53, 133, 312, 133}, {53, 134, 312, 134}, {54, 135, 311, 135}, {55, 136, 310, 136}, {56, 137, 309, 137}, {56, 138, 309, 138}, {57, 139, 308, 139}, {58, 140, 181, 140}, {203, 140, 307, 140}, {58, 141, 175, 141}, {208, 141, 307, 141}, {59, 142, 171, 142}, {212, 142, 306, 142}, {60, 143, 167, 143}, {215, 143, 305, 143}, {61, 144, 163, 144}, {218, 144, 304, 144}, {61, 145, 160, 145}, {220, 145, 304, 145}, {62, 146, 157, 146}, {223, 146, 303, 146}, {63, 147, 154, 147}, {225, 147, 302, 147}, {63, 148, 151, 148}, {227, 148, 301, 148}, {64, 149, 149, 149}, {230, 149, 301, 149}, {65, 150, 146, 150}, {231, 150, 300, 150}, {65, 151, 143, 151}, {233, 151, 299, 151}, {66, 152, 141, 152}, {235, 152, 299, 152}, {67, 153, 138, 153}, {237, 153, 298, 153}, {68, 154, 136, 154}, {239, 154, 297, 154}, {68, 155, 133, 155}, {241, 155, 296, 155}, {69, 156, 131, 156}, {243, 156, 296, 156}, {70, 157, 129, 157}, {245, 157, 295, 157}, {70, 158, 126, 158}, {246, 158, 294, 158}, {71, 159, 124, 159}, {248, 159, 293, 159}, {72, 160, 121, 160}, {250, 160, 293, 160}, {73, 161, 119, 161}, {252, 161, 292, 161}, {73, 162, 117, 162}, {253, 162, 291, 162}, {74, 163, 115, 163}, {255, 163, 291, 163}, {75, 164, 112, 164}, {257, 164, 290, 164}, {75, 165, 110, 165}, {258, 165, 289, 165}, {76, 166, 108, 166}, {260, 166, 288, 166}, {77, 167, 105, 167}, {262, 167, 288, 167}, {77, 168, 103, 168}, {263, 168, 287, 168}, {78, 169, 101, 169}, {265, 169, 286, 169}, {79, 170, 99, 170}, {266, 170, 285, 170}, {80, 171, 96, 171}, {268, 171, 285, 171}, {80, 172, 94, 172}, {270, 172, 284, 172}, {81, 173, 92, 173}, {271, 173, 283, 173}, {82, 174, 90, 174}, {273, 174, 283, 174}, {82, 175, 87, 175}, {275, 175, 282, 175}, {82, 176, 88, 176}, {276, 176, 282, 176}, {83, 177, 88, 177}, {275, 177, 282, 177}, {84, 178, 89, 178}, {275, 178, 281, 178}, {85, 179, 90, 179}, {275, 179, 280, 179}, {85, 180, 91, 180}, {274, 180, 279, 180}, {86, 181, 92, 181}, {273, 181, 279, 181}, {87, 182, 93, 182}, {272, 182, 278, 182}, {88, 183, 93, 183}, {271, 183, 277, 183}, {89, 184, 94, 184}, {270, 184, 276, 184}, {90, 185, 95, 185}, {269, 185, 275, 185}, {90, 186, 96, 186}, {269, 186, 274, 186}, {91, 187, 97, 187}, {268, 187, 273, 187}, {92, 188, 98, 188}, {267, 188, 273, 188}, {93, 189, 98, 189}, {266, 189, 272, 189}, {94, 190, 99, 190}, {265, 190, 271, 190}, {95, 191, 100, 191}, {264, 191, 270, 191}, {95, 192, 101, 192}, {263, 192, 269, 192}, {96, 193, 102, 193}, {263, 193, 268, 193}, {97, 194, 102, 194}, {262, 194, 267, 194}, {98, 195, 103, 195}, {261, 195, 266, 195}, {99, 196, 104, 196}, {260, 196, 266, 196}, {100, 197, 105, 197}, {259, 197, 265, 197}, {100, 198, 106, 198}, {258, 198, 264, 198}, {101, 199, 107, 199}, {257, 199, 263, 199}, {102, 200, 107, 200}, {256, 200, 262, 200}, {103, 201, 108, 201}, {256, 201, 261, 201}, {104, 202, 109, 202}, {255, 202, 260, 202}, {104, 203, 110, 203}, {254, 203, 260, 203}, {105, 204, 111, 204}, {253, 204, 259, 204}, {106, 205, 112, 205}, {252, 205, 258, 205}, {107, 206, 112, 206}, {251, 206, 257, 206}, {108, 207, 113, 207}, {250, 207, 256, 207}, {109, 208, 114, 208}, {250, 208, 255, 208}, {109, 209, 115, 209}, {249, 209, 254, 209}, {110, 210, 116, 210}, {248, 210, 254, 210}, {111, 211, 117, 211}, {247, 211, 253, 211}, {112, 212, 117, 212}, {246, 212, 252, 212}, {113, 213, 118, 213}, {245, 213, 251, 213}, {114, 214, 119, 214}, {244, 214, 250, 214}, {114, 215, 120, 215}, {244, 215, 249, 215}, {115, 216, 121, 216}, {243, 216, 248, 216}, {116, 217, 122, 217}, {242, 217, 247, 217}, {117, 218, 122, 218}, {241, 218, 247, 218}, {118, 219, 123, 219}, {240, 219, 246, 219}, {119, 220, 124, 220}, {239, 220, 245, 220}, {119, 221, 125, 221}, {238, 221, 244, 221}, {120, 222, 126, 222}, {237, 222, 243, 222}, {121, 223, 127, 223}, {237, 223, 242, 223}, {122, 224, 127, 224}, {236, 224, 241, 224}, {123, 225, 128, 225}, {235, 225, 241, 225}, {124, 226, 129, 226}, {234, 226, 240, 226}, {124, 227, 130, 227}, {233, 227, 239, 227}, {125, 228, 131, 228}, {232, 228, 238, 228}, {126, 229, 131, 229}, {231, 229, 237, 229}, {127, 230, 132, 230}, {231, 230, 236, 230}, {128, 231, 133, 231}, {230, 231, 235, 231}, {129, 232, 134, 232}, {229, 232, 235, 232}, {129, 233, 135, 233}, {228, 233, 234, 233}, {130, 234, 136, 234}, {227, 234, 233, 234}, {131, 235, 136, 235}, {226, 235, 232, 235}, {132, 236, 137, 236}, {225, 236, 231, 236}, {133, 237, 138, 237}, {224, 237, 230, 237}, {134, 238, 139, 238}, {223, 238, 229, 238}, {134, 239, 140, 239}, {223, 239, 228, 239}, {135, 240, 141, 240}, {222, 240, 228, 240}, {136, 241, 141, 241}, {221, 241, 227, 241}, {137, 242, 142, 242}, {221, 242, 226, 242}, {138, 243, 143, 243}, {221, 243, 225, 243}, {138, 244, 144, 244}, {220, 244, 225, 244}, {139, 245, 145, 245}, {148, 245, 150, 245}, {220, 245, 225, 245}, {140, 246, 151, 246}, {219, 246, 224, 246}, {141, 247, 151, 247}, {219, 247, 224, 247}, {142, 248, 152, 248}, {218, 248, 223, 248}, {143, 249, 152, 249}, {218, 249, 223, 249}, {143, 250, 153, 250}, {218, 250, 222, 250}, {144, 251, 153, 251}, {217, 251, 222, 251}, {145, 252, 154, 252}, {217, 252, 221, 252}, {146, 253, 148, 253}, {150, 253, 154, 253}, {216, 253, 221, 253}, {150, 254, 155, 254}, {216, 254, 220, 254}, {150, 255, 155, 255}, {215, 255, 220, 255}, {151, 256, 155, 256}, {215, 256, 219, 256}, {151, 257, 156, 257}, {214, 257, 219, 257}, {152, 258, 156, 258}, {214, 258, 218, 258}, {152, 259, 157, 259}, {213, 259, 218, 259}, {153, 260, 157, 260}, {213, 260, 217, 260}, {153, 261, 158, 261}, {212, 261, 217, 261}, {154, 262, 158, 262}, {212, 262, 216, 262}, {154, 263, 159, 263}, {183, 263, 190, 263}, {211, 263, 216, 263}, {155, 264, 159, 264}, {180, 264, 194, 264}, {211, 264, 216, 264}, {155, 265, 160, 265}, {178, 265, 196, 265}, {210, 265, 215, 265}, {156, 266, 160, 266}, {176, 266, 197, 266}, {210, 266, 215, 266}, {156, 267, 161, 267}, {175, 267, 199, 267}, {209, 267, 214, 267}, {156, 268, 161, 268}, {173, 268, 182, 268}, {191, 268, 200, 268}, {209, 268, 214, 268}, {157, 269, 161, 269}, {172, 269, 180, 269}, {194, 269, 201, 269}, {209, 269, 213, 269}, {157, 270, 162, 270}, {171, 270, 178, 270}, {195, 270, 202, 270}, {208, 270, 213, 270}, {158, 271, 162, 271}, {171, 271, 177, 271}, {197, 271, 202, 271}, {208, 271, 212, 271}, {158, 272, 163, 272}, {170, 272, 175, 272}, {198, 272, 203, 272}, {207, 272, 212, 272}, {159, 273, 163, 273}, {170, 273, 175, 273}, {199, 273, 203, 273}, {207, 273, 211, 273}, {159, 274, 164, 274}, {169, 274, 174, 274}, {199, 274, 204, 274}, {206, 274, 211, 274}, {160, 275, 164, 275}, {169, 275, 173, 275}, {200, 275, 204, 275}, {206, 275, 210, 275}, {160, 276, 165, 276}, {169, 276, 173, 276}, {200, 276, 210, 276}, {161, 277, 165, 277}, {168, 277, 172, 277}, {201, 277, 209, 277}, {161, 278, 166, 278}, {168, 278, 172, 278}, {201, 278, 209, 278}, {162, 279, 166, 279}, {168, 279, 172, 279}, {201, 279, 208, 279}, {162, 280, 172, 280}, {201, 280, 208, 280}, {162, 281, 172, 281}, {201, 281, 207, 281}, {163, 282, 172, 282}, {201, 282, 207, 282}, {163, 283, 172, 283}, {201, 283, 207, 283}, {164, 284, 173, 284}, {200, 284, 206, 284}, {164, 285, 173, 285}, {200, 285, 206, 285}, {165, 286, 174, 286}, {199, 286, 205, 286}, {165, 287, 174, 287}, {199, 287, 205, 287}, {166, 288, 175, 288}, {198, 288, 204, 288}, {166, 289, 176, 289}, {197, 289, 204, 289}, {167, 290, 178, 290}, {184, 290, 189, 290}, {195, 290, 203, 290}, {167, 291, 179, 291}, {182, 291, 191, 291}, {194, 291, 203, 291}, {168, 292, 202, 292}, {168, 293, 202, 293}, {168, 294, 173, 294}, {176, 294, 201, 294}, {169, 295, 173, 295}, {177, 295, 201, 295}, {169, 296, 174, 296}, {178, 296, 200, 296}, {170, 297, 174, 297}, {177, 297, 200, 297}, {170, 298, 181, 298}, {192, 298, 199, 298}, {171, 299, 181, 299}, {193, 299, 197, 299}, {171, 300, 180, 300}, {193, 300, 198, 300}, {172, 301, 180, 301}, {194, 301, 198, 301}, {175, 302, 179, 302}, {194, 302, 198, 302}, {175, 303, 179, 303}, {194, 303, 199, 303}, {174, 304, 178, 304}, {195, 304, 199, 304}, {174, 305, 178, 305}, {195, 305, 199, 305}, {174, 306, 178, 306}, {195, 306, 199, 306}, {174, 307, 178, 307}, {195, 307, 199, 307}, {174, 308, 178, 308}, {196, 308, 200, 308}, {173, 309, 177, 309}, {196, 309, 200, 309}, {173, 310, 177, 310}, {196, 310, 200, 310}, {173, 311, 177, 311}, {196, 311, 200, 311}, {173, 312, 177, 312}, {196, 312, 200, 312}, {173, 313, 177, 313}, {196, 313, 200, 313}, {173, 314, 177, 314}, {196, 314, 200, 314}, {173, 315, 177, 315}, {196, 315, 200, 315}, {173, 316, 177, 316}, {196, 316, 200, 316}, {173, 317, 177, 317}, {196, 317, 200, 317}, {173, 318, 177, 318}, {196, 318, 200, 318}, {173, 319, 177, 319}, {196, 319, 200, 319}, {174, 320, 178, 320}, {196, 320, 200, 320}, {174, 321, 178, 321}, {195, 321, 199, 321}, {174, 322, 178, 322}, {195, 322, 199, 322}, {174, 323, 178, 323}, {195, 323, 199, 323}, {174, 324, 178, 324}, {195, 324, 199, 324}, {175, 325, 179, 325}, {194, 325, 199, 325}, {175, 326, 179, 326}, {194, 326, 198, 326}, {175, 327, 179, 327}, {194, 327, 198, 327}, {176, 328, 180, 328}, {193, 328, 198, 328}, {176, 329, 180, 329}, {193, 329, 197, 329}, {176, 330, 181, 330}, {192, 330, 197, 330}, {177, 331, 182, 331}, {191, 331, 197, 331}, {177, 332, 183, 332}, {190, 332, 198, 332}, {178, 333, 184, 333}, {189, 333, 198, 333}, {179, 334, 199, 334}, {180, 335, 193, 335}, {195, 335, 199, 335}, {181, 336, 192, 336}, {195, 336, 200, 336}, {181, 337, 191, 337}, {196, 337, 200, 337}, {181, 338, 189, 338}, {196, 338, 201, 338}, {180, 339, 185, 339}, {197, 339, 201, 339}, {180, 340, 184, 340}, {197, 340, 202, 340}, {180, 341, 184, 341}, {197, 341, 202, 341}, {179, 342, 184, 342}, {198, 342, 203, 342}, {179, 343, 183, 343}, {198, 343, 203, 343}, {179, 344, 183, 344}, {199, 344, 204, 344}, {178, 345, 183, 345}, {199, 345, 204, 345}, {178, 346, 182, 346}, {200, 346, 204, 346}, {178, 347, 182, 347}, {200, 347, 205, 347}, {177, 348, 182, 348}, {201, 348, 205, 348}, {177, 349, 181, 349}, {201, 349, 206, 349}, {177, 350, 181, 350}, {202, 350, 206, 350}, {176, 351, 181, 351}, {202, 351, 207, 351}, {176, 352, 180, 352}, {203, 352, 207, 352}, {176, 353, 180, 353}, {203, 353, 208, 353}, {175, 354, 180, 354}, {204, 354, 208, 354}, {175, 355, 179, 355}, {204, 355, 209, 355}, {175, 356, 179, 356}, {205, 356, 209, 356}, {174, 357, 179, 357}, {205, 357, 210, 357}, {174, 358, 178, 358}, {206, 358, 210, 358}, {174, 359, 178, 359}, {206, 359, 211, 359}, {173, 360, 178, 360}, {206, 360, 211, 360}, {173, 361, 177, 361}, {207, 361, 212, 361}, {173, 362, 177, 362}, {207, 362, 212, 362}, {172, 363, 177, 363}, {208, 363, 212, 363}, {172, 364, 176, 364}, {208, 364, 213, 364}, {172, 365, 176, 365}, {209, 365, 213, 365}, {171, 366, 176, 366}, {209, 366, 214, 366}, {171, 367, 175, 367}, {210, 367, 214, 367}, {171, 368, 175, 368}, {210, 368, 215, 368}, {170, 369, 175, 369}, {211, 369, 215, 369}, {170, 370, 174, 370}, {211, 370, 215, 370}, {170, 371, 174, 371}, {212, 371, 214, 371}, {170, 372, 174, 372}, {169, 373, 174, 373}, {169, 374, 173, 374}, {169, 375, 173, 375}, {168, 376, 173, 376}, {168, 377, 172, 377}, {168, 378, 172, 378}, {169, 379, 171, 379}
    };
    for (int i = 0; i < 636; i++) {
        draw_line(map,lines[i][0],lines[i][1],lines[i][2],lines[i][3]);
    }
    return map;
}

Matriks Word::drawP() {
    // Set points
    Matriks map(80,80);

    int lines [10][4] = {
        {0,0,70,0},{70,0,70,40},{70,40,20,40},{20,40,20,79},{20,79,0,79},{0,79,0,0},
        {20,10,60,10},{60,10,60,30},{60,30,20,30},{20,30,20,10}
    };
    for (int i = 0; i < 10; i++) {
            draw_line(map,lines[i][0],lines[i][1],lines[i][2],lines[i][3]);
        }
    floodFill(map,start_fill_x,start_fill_y);
    return map;
}

Matriks Word::drawY() {
    Matriks map(80,80);

    // Gambar
    int lines[9][4] = {
        {0, 0, 20, 0}, {0, 0, 30, 54}, {20, 0, 40, 34},
        {49, 54, 79, 0}, {39, 34, 59, 0}, {59, 0, 79, 0},
        {30, 54, 30, 79}, {30, 79, 49, 79}, {49, 54, 49, 79}
    };

    for (int i = 0; i < 9; i++) {
         draw_line(map,lines[i][0],lines[i][1],lines[i][2],lines[i][3]);
    }

    floodFill(map,start_fill_x,start_fill_y);

    return map;
}

Matriks Word::drawG() {
    Matriks map(80, 80);

    // Gambar
    int lines[12][4] = {
        {0, 0, 79, 0}, {79, 0, 79, 20}, {0, 0, 0, 79},
        {79, 20, 20, 20}, {20, 20, 20, 59}, {20, 59, 59, 59},
        {59, 59, 59, 49}, {59, 49, 49, 49}, {49, 49, 49, 29},
        {49, 29, 79, 29}, {79, 29, 79, 79}, {79, 79, 0, 79}
    };

    for (int i = 0; i < 12; i++) {
         draw_line(map,lines[i][0],lines[i][1],lines[i][2],lines[i][3]);
    }

    floodFill(map,start_fill_x,start_fill_y);

    return map;
}

Matriks Word::drawN() {
    Matriks map(80, 80);

    // Gambar
    int lines[12][4] = {
        {0, 0, 20, 0}, {0, 0, 0, 79}, {0, 79, 20, 79},
        {20, 79, 20, 29}, {20, 29, 59, 79}, {59, 79, 79, 79},
        {79, 79, 79, 0}, {79, 0, 59, 0}, {59, 0, 59, 59}, {59, 59, 20, 0} 
    };

    for (int i = 0; i < 12; i++) {
         draw_line(map,lines[i][0],lines[i][1],lines[i][2],lines[i][3]);
    }

    floodFill(map,start_fill_x,start_fill_y);

    return map;
}

Matriks Word::drawA() {
    Matriks map(50, 50);
    // Gambar
    int lines[12][4] = {
        {0, 0, 49, 0}, {49, 0, 49, 10}, {49, 10, 10, 10},
        {10, 10, 10, 20}, {10, 20, 49, 20}, {49, 20, 49, 49},
        {49, 49, 0, 49}, {0, 49, 0, 0}, {10, 30, 39, 30},
        {39, 30, 39, 40}, {39, 40, 10, 40}, {10, 40, 10, 30}  
    };

    for (int i = 0; i < 12; i++) {
         draw_line(map,lines[i][0],lines[i][1],lines[i][2],lines[i][3]);
    }

    floodFill(map,start_fill_x,start_fill_y);

    return map;
}

Matriks Word::drawZ() {
    // Set points
    Matriks map(80,80);

    int lines [10][4] = {
        {1,1,78,1},{78,1,78,8},{78,8,8,70},{8,70,78,70},{78,70,78,78},{78,78,1,78},
        {1,78,1,70},{1,70,70,8},{70,8,1,8},{1,8,1,1}
    };
    for (int i = 0; i < 10; i++) {
            draw_line(map,lines[i][0],lines[i][1],lines[i][2],lines[i][3]);
        }
     floodFill(map, 2, 2);
    return map;
}

Matriks Word::drawU() {
    // Set points
    Matriks map(80,80);

    int lines [16][4] = {
        {15, 19,
        31, 19},

        {31, 19,
        31, 63},

        {31, 63,
        55, 63},

        {55, 63,
        55, 23},

        {55, 23,
        47, 23},

        {47, 23,
        47, 19},

        {47, 19,
        63, 19},

        {63, 19,
        63, 63},

        {63, 63,
        67, 63},

        {67, 63,
        67, 67},

        {67, 67,
        63, 71},

        {63, 71,
        31, 71},

        {31, 71,
        23, 63},

        {23, 63,
        23, 23},

        {23, 23,
        15, 23},

        {15, 23,
        15, 19}
    };
    for (int i = 0; i < 16; i++) {
            draw_line(map,lines[i][0],lines[i][1],lines[i][2],lines[i][3]);
        }
    floodFill(map, 16, 20);
    return map;
}

Matriks Word::drawh() {
    // Set points
    Matriks map(50,50);
    int pixel[2500] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

    for (int i = 0; i < 50; i++) {
        for (int j = 0; j < 50; j++) {
            map.setVal(j, i, pixel[i*50 + j]);
        }
    }
    floodFill(map, 10, 10);
    
    return map;
}

void Word::floodFill(Matriks& m,int s_x, int s_y) {

    queue<Point> my_q;  
    my_q.push(Point(s_x,s_y));
    m.setVal(s_x,s_y,1);

    while (my_q.size() > 0 ) {
        int p_x = my_q.front().getX();
        int p_y = my_q.front().getY();
        

        if (m.getVal(p_x-1,p_y) == 0) {
            my_q.push(Point(p_x-1,p_y));
            m.setVal(p_x-1,p_y,1);
        }
        if (m.getVal(p_x+1,p_y) == 0) {
            my_q.push(Point(p_x+1,p_y));
            m.setVal(p_x+1,p_y,1);
        }
        if (m.getVal(p_x,p_y-1) == 0) {
            my_q.push(Point(p_x,p_y-1));
            m.setVal(p_x,p_y-1,1);
        }
        if (m.getVal(p_x,p_y+1) == 0) {
            my_q.push(Point(p_x,p_y+1));
            m.setVal(p_x,p_y+1,1);
        }

        my_q.pop();
    }

}

void Word::draw_line_low(Matriks &m,int x0,int y0,int x1,int y1) {
    int dx = x1 - x0;
    int dy = y1 - y0;
    int yi = 1;
    if (dy < 0) {
        yi = -1;
        dy = -dy;
    }
    int D = 2*dy - dx;
    int y = y0;

    for (int x = x0; x <= x1; x++) {
        m.setVal(x,y,1);
        if (D > 0) {
            y += yi;
            D -= 2*dx;
        }
        D += 2*dy;
    }
}

void Word::draw_line_high(Matriks &m,int x0,int y0,int x1,int y1) {
    int dx = x1 - x0;
    int dy = y1 - y0;
    int xi = 1;
    if (dx < 0) {
        xi = -1;
        dx = -dx;
    }
    int D = 2*dx - dy;
    int x = x0;

    for (int y = y0; y <= y1; y++) {
        m.setVal(x,y,1);
        if (D > 0) {
            x += xi;
            D -= 2*dy;
        }
        D += 2*dx;
    }
}
  

void Word::draw_line(Matriks &m,int x0, int y0, int x1, int y1) {
    if (abs(y1 - y0) < abs(x1 - x0))
    if (x0 > x1)
      draw_line_low(m,x1, y1, x0, y0);
    else
      draw_line_low(m,x0, y0, x1, y1);
  else
    if (y0 > y1)
      draw_line_high(m,x1, y1, x0, y0);
    else
      draw_line_high(m,x0, y0, x1, y1);

}



